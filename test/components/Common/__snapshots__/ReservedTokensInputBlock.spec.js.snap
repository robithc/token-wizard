// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReservedTokensInputBlock render should render the component for percentage: percentage 1`] = `
<inject-ReservedTokensInputBlock-with-reservedTokenStore
  reservedTokenStore={
    ReservedTokenStore {
      "tokens": Array [],
    }
  }
  tokenStore={
    TokenStore {
      "decimals": undefined,
      "name": undefined,
      "reservedTokensInput": Object {},
      "supply": 0,
      "ticker": undefined,
      "validToken": Object {
        "decimals": "EMPTY",
        "name": "EMPTY",
        "ticker": "EMPTY",
      },
    }
  }
>
  <ReservedTokensInputBlock
    reservedTokenStore={
      ReservedTokenStore {
        "tokens": Array [],
      }
    }
    tokenStore={
      TokenStore {
        "decimals": undefined,
        "name": undefined,
        "reservedTokensInput": Object {},
        "supply": 0,
        "ticker": undefined,
        "validToken": Object {
          "decimals": "EMPTY",
          "name": "EMPTY",
          "ticker": "EMPTY",
        },
      }
    }
  >
    <div>
      <h2
        className="sw-BorderedBlockTitle"
      >
        Reserved tokens
      </h2>
      <div
        className="sw-BorderedBlock sw-BorderedBlock-ReservedTokensWhitelistCapped"
      >
        <InputField
          description="Address where to send reserved tokens."
          errorMessage="The inserted address is invalid"
          extraClassName="sw-InputField-ReservedTokensAddress"
          name="Address"
          onChange={[Function]}
          placeholder="Enter here"
          pristine={true}
          title="Address"
          type="text"
          valid="INVALID"
          value=""
        >
          <div
            className="sw-InputField sw-InputField-ReservedTokensAddress"
          >
            <FormControlTitle
              description="Address where to send reserved tokens."
              title="Address"
            >
              <div
                className="sw-FormControlTitle"
              >
                <label
                  className="sw-FormControlTitle_Label"
                >
                  Address
                </label>
                <div
                  className="sw-FormControlTitle_Info"
                  tabIndex="-1"
                >
                  <span
                    className="sw-FormControlTitle_Tooltip"
                  >
                    Address where to send reserved tokens.
                  </span>
                </div>
              </div>
            </FormControlTitle>
            <TextField
              id="Address"
              onChange={[Function]}
              placeholder="Enter here"
              type="text"
              value=""
            >
              <input
                className="sw-TextField"
                onChange={[Function]}
                placeholder="Enter here"
                type="text"
                value=""
              />
            </TextField>
          </div>
        </InputField>
        <RadioInputField
          description="Fixed amount or % of crowdsaled tokens. Will be deposited to the account after finalization of the crowdsale."
          extraClassName="sw-RadioInputField-ReservedTokensDimension"
          items={
            Array [
              Object {
                "label": "Tokens",
                "value": "tokens",
              },
              Object {
                "label": "Percentage",
                "value": "percentage",
              },
            ]
          }
          onChange={[Function]}
          selectedItem="percentage"
          title="Dimension"
        >
          <div
            className="sw-RadioInputField sw-RadioInputField-ReservedTokensDimension"
          >
            <FormControlTitle
              description="Fixed amount or % of crowdsaled tokens. Will be deposited to the account after finalization of the crowdsale."
              title="Dimension"
            >
              <div
                className="sw-FormControlTitle"
              >
                <label
                  className="sw-FormControlTitle_Label"
                >
                  Dimension
                </label>
                <div
                  className="sw-FormControlTitle_Info"
                  tabIndex="-1"
                >
                  <span
                    className="sw-FormControlTitle_Tooltip"
                  >
                    Fixed amount or % of crowdsaled tokens. Will be deposited to the account after finalization of the crowdsale.
                  </span>
                </div>
              </div>
            </FormControlTitle>
            <div
              className="sw-RadioInputField_ButtonsContainer"
            >
              <label
                className="sw-RadioInputField_Label"
                key="0"
              >
                <input
                  checked={false}
                  className="sw-RadioInputField_Input"
                  id="tokens"
                  onChange={[Function]}
                  type="radio"
                  value="tokens"
                />
                <span
                  className="sw-RadioInputField_Button"
                >
                  Tokens
                </span>
              </label>
              <label
                className="sw-RadioInputField_Label"
                key="1"
              >
                <input
                  checked={true}
                  className="sw-RadioInputField_Input"
                  id="percentage"
                  onChange={[Function]}
                  type="radio"
                  value="percentage"
                />
                <span
                  className="sw-RadioInputField_Button"
                >
                  Percentage
                </span>
              </label>
            </div>
          </div>
        </RadioInputField>
        <div
          className="sw-NumericInputAndButtonContainer sw-NumericInputAndButtonContainer-RerservedTokensValue"
        >
          <NumericInput
            acceptFloat={true}
            description="Value in percentage. Don't forget to click + button for each reserved token."
            dimension="percentage"
            errorMessage="Value must be positive"
            min={0}
            name="Value"
            onValueUpdate={[Function]}
            placeholder="Enter here"
            pristine={true}
            title="Value"
            valid="VALIDATED"
            value=""
          >
            <div
              className="sw-NumericInput "
            >
              <FormControlTitle
                description="Value in percentage. Don't forget to click + button for each reserved token."
                title="Value"
              >
                <div
                  className="sw-FormControlTitle"
                >
                  <label
                    className="sw-FormControlTitle_Label"
                  >
                    Value
                  </label>
                  <div
                    className="sw-FormControlTitle_Info"
                    tabIndex="-1"
                  >
                    <span
                      className="sw-FormControlTitle_Tooltip"
                    >
                      Value in percentage. Don't forget to click + button for each reserved token.
                    </span>
                  </div>
                </div>
              </FormControlTitle>
              <TextField
                id="Value"
                min="0"
                onChange={[Function]}
                onKeyPress={[Function]}
                onPaste={[Function]}
                placeholder="Enter here"
                step="1"
                type="number"
                value=""
              >
                <input
                  className="sw-TextField"
                  min="0"
                  onChange={[Function]}
                  onKeyPress={[Function]}
                  onPaste={[Function]}
                  placeholder="Enter here"
                  step="1"
                  type="number"
                  value=""
                />
              </TextField>
            </div>
          </NumericInput>
          <ButtonPlus
            onClick={[Function]}
          >
            <button
              className="sw-ButtonPlus "
              onClick={[Function]}
              type="button"
            />
          </ButtonPlus>
        </div>
        <div
          className="sw-ReservedTokensListControls"
        >
          <Component
            accept=".csv"
            onDrop={[Function]}
            style={Object {}}
          >
            <span>
              Dropzone
            </span>
          </Component>
          <ButtonCSV
            extraClassName="sw-ButtonCSV-downloadcsv m-r-0"
            onClick={[Function]}
            text="Download CSV template"
          >
            <button
              className="sw-ButtonCSV sw-ButtonCSV-downloadcsv m-r-0"
              onClick={[Function]}
              type="button"
            >
              Download CSV template
            </button>
          </ButtonCSV>
        </div>
      </div>
    </div>
  </ReservedTokensInputBlock>
</inject-ReservedTokensInputBlock-with-reservedTokenStore>
`;

exports[`ReservedTokensInputBlock render should render the component for tokens: tokens 1`] = `
<inject-ReservedTokensInputBlock-with-reservedTokenStore
  reservedTokenStore={
    ReservedTokenStore {
      "tokens": Array [],
    }
  }
  tokenStore={
    TokenStore {
      "decimals": undefined,
      "name": undefined,
      "reservedTokensInput": Object {},
      "supply": 0,
      "ticker": undefined,
      "validToken": Object {
        "decimals": "EMPTY",
        "name": "EMPTY",
        "ticker": "EMPTY",
      },
    }
  }
>
  <ReservedTokensInputBlock
    reservedTokenStore={
      ReservedTokenStore {
        "tokens": Array [],
      }
    }
    tokenStore={
      TokenStore {
        "decimals": undefined,
        "name": undefined,
        "reservedTokensInput": Object {},
        "supply": 0,
        "ticker": undefined,
        "validToken": Object {
          "decimals": "EMPTY",
          "name": "EMPTY",
          "ticker": "EMPTY",
        },
      }
    }
  >
    <div>
      <h2
        className="sw-BorderedBlockTitle"
      >
        Reserved tokens
      </h2>
      <div
        className="sw-BorderedBlock sw-BorderedBlock-ReservedTokensWhitelistCapped"
      >
        <InputField
          description="Address where to send reserved tokens."
          errorMessage="The inserted address is invalid"
          extraClassName="sw-InputField-ReservedTokensAddress"
          name="Address"
          onChange={[Function]}
          placeholder="Enter here"
          pristine={true}
          title="Address"
          type="text"
          valid="INVALID"
          value=""
        >
          <div
            className="sw-InputField sw-InputField-ReservedTokensAddress"
          >
            <FormControlTitle
              description="Address where to send reserved tokens."
              title="Address"
            >
              <div
                className="sw-FormControlTitle"
              >
                <label
                  className="sw-FormControlTitle_Label"
                >
                  Address
                </label>
                <div
                  className="sw-FormControlTitle_Info"
                  tabIndex="-1"
                >
                  <span
                    className="sw-FormControlTitle_Tooltip"
                  >
                    Address where to send reserved tokens.
                  </span>
                </div>
              </div>
            </FormControlTitle>
            <TextField
              id="Address"
              onChange={[Function]}
              placeholder="Enter here"
              type="text"
              value=""
            >
              <input
                className="sw-TextField"
                onChange={[Function]}
                placeholder="Enter here"
                type="text"
                value=""
              />
            </TextField>
          </div>
        </InputField>
        <RadioInputField
          description="Fixed amount or % of crowdsaled tokens. Will be deposited to the account after finalization of the crowdsale."
          extraClassName="sw-RadioInputField-ReservedTokensDimension"
          items={
            Array [
              Object {
                "label": "Tokens",
                "value": "tokens",
              },
              Object {
                "label": "Percentage",
                "value": "percentage",
              },
            ]
          }
          onChange={[Function]}
          selectedItem="tokens"
          title="Dimension"
        >
          <div
            className="sw-RadioInputField sw-RadioInputField-ReservedTokensDimension"
          >
            <FormControlTitle
              description="Fixed amount or % of crowdsaled tokens. Will be deposited to the account after finalization of the crowdsale."
              title="Dimension"
            >
              <div
                className="sw-FormControlTitle"
              >
                <label
                  className="sw-FormControlTitle_Label"
                >
                  Dimension
                </label>
                <div
                  className="sw-FormControlTitle_Info"
                  tabIndex="-1"
                >
                  <span
                    className="sw-FormControlTitle_Tooltip"
                  >
                    Fixed amount or % of crowdsaled tokens. Will be deposited to the account after finalization of the crowdsale.
                  </span>
                </div>
              </div>
            </FormControlTitle>
            <div
              className="sw-RadioInputField_ButtonsContainer"
            >
              <label
                className="sw-RadioInputField_Label"
                key="0"
              >
                <input
                  checked={true}
                  className="sw-RadioInputField_Input"
                  id="tokens"
                  onChange={[Function]}
                  type="radio"
                  value="tokens"
                />
                <span
                  className="sw-RadioInputField_Button"
                >
                  Tokens
                </span>
              </label>
              <label
                className="sw-RadioInputField_Label"
                key="1"
              >
                <input
                  checked={false}
                  className="sw-RadioInputField_Input"
                  id="percentage"
                  onChange={[Function]}
                  type="radio"
                  value="percentage"
                />
                <span
                  className="sw-RadioInputField_Button"
                >
                  Percentage
                </span>
              </label>
            </div>
          </div>
        </RadioInputField>
        <div
          className="sw-NumericInputAndButtonContainer sw-NumericInputAndButtonContainer-RerservedTokensValue"
        >
          <NumericInput
            acceptFloat={true}
            description="Value in tokens. Don't forget to click + button for each reserved token."
            dimension="tokens"
            errorMessage="Value must be positive and decimals should not exceed the amount of decimals specified"
            maxDecimals={0}
            min={0}
            name="Value"
            onValueUpdate={[Function]}
            placeholder="Enter here"
            pristine={true}
            title="Value"
            valid="INVALID"
            value=""
          >
            <div
              className="sw-NumericInput "
            >
              <FormControlTitle
                description="Value in tokens. Don't forget to click + button for each reserved token."
                title="Value"
              >
                <div
                  className="sw-FormControlTitle"
                >
                  <label
                    className="sw-FormControlTitle_Label"
                  >
                    Value
                  </label>
                  <div
                    className="sw-FormControlTitle_Info"
                    tabIndex="-1"
                  >
                    <span
                      className="sw-FormControlTitle_Tooltip"
                    >
                      Value in tokens. Don't forget to click + button for each reserved token.
                    </span>
                  </div>
                </div>
              </FormControlTitle>
              <TextField
                id="Value"
                min="1"
                onChange={[Function]}
                onKeyPress={[Function]}
                onPaste={[Function]}
                placeholder="Enter here"
                step="1"
                type="number"
                value=""
              >
                <input
                  className="sw-TextField"
                  min="1"
                  onChange={[Function]}
                  onKeyPress={[Function]}
                  onPaste={[Function]}
                  placeholder="Enter here"
                  step="1"
                  type="number"
                  value=""
                />
              </TextField>
            </div>
          </NumericInput>
          <ButtonPlus
            onClick={[Function]}
          >
            <button
              className="sw-ButtonPlus "
              onClick={[Function]}
              type="button"
            />
          </ButtonPlus>
        </div>
        <div
          className="sw-ReservedTokensListControls"
        >
          <Component
            accept=".csv"
            onDrop={[Function]}
            style={Object {}}
          >
            <span>
              Dropzone
            </span>
          </Component>
          <ButtonCSV
            extraClassName="sw-ButtonCSV-downloadcsv m-r-0"
            onClick={[Function]}
            text="Download CSV template"
          >
            <button
              className="sw-ButtonCSV sw-ButtonCSV-downloadcsv m-r-0"
              onClick={[Function]}
              type="button"
            >
              Download CSV template
            </button>
          </ButtonCSV>
        </div>
      </div>
    </div>
  </ReservedTokensInputBlock>
</inject-ReservedTokensInputBlock-with-reservedTokenStore>
`;
